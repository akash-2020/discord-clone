{"version":3,"sources":["ChatHeader.js","Message.js","features/appSlice.js","features/userSlice.js","firebase.js","Chat.js","SidebarChannel.js","Sidebar.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["ChatHeader","channelName","className","placeholder","Message","timestamp","user","message","Avatar","src","photo","displayName","Date","toDate","toUTCString","appSlice","createSlice","name","initialState","channelId","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectUChannelName","userSlice","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","provider","GoogleAuthProvider","Chat","useSelector","useState","input","setInput","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","fontSize","value","required","disabled","onChange","e","target","type","onClick","document","forms","alert","preventDefault","add","FieldValue","serverTimestamp","SidebarChannel","id","dispatch","useDispatch","Sidebar","fetchUser","channels","setChannels","channel","prompt","signOut","uid","substring","Login","alt","Button","signInWithPopup","catch","error","App","onAuthStateChanged","authUser","photoURL","email","store","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f666391.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ChatHeader.css';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport EditLocationIcon from '@material-ui/icons/EditLocation';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport HelpIcon from '@material-ui/icons/Help';\r\nimport SendIcon from '@material-ui/icons/Send';\r\n\r\nfunction ChatHeader({channelName}) {\r\n    return (\r\n        <div className=\"chatHeader\">\r\n            <div className=\"chatHeader__left\">\r\n                <h3>\r\n                    <span className=\"chatHeader__hash\">\r\n                        #\r\n                    </span>\r\n                    {channelName}\r\n                </h3>\r\n            </div>\r\n            <div className=\"chatHeader__right\">\r\n                <NotificationsIcon />\r\n                <EditLocationIcon />\r\n                <PeopleAltIcon />\r\n                <div className=\"chatHeader__search\">\r\n                    <input placeholder=\"Search\" />\r\n                    <SearchIcon />\r\n                </div>\r\n                <SendIcon />\r\n                <HelpIcon />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatHeader\r\n","import { Avatar } from '@material-ui/core';\r\nimport React from 'react';\r\nimport './Message.css';\r\n\r\nfunction Message({timestamp,user,message}) {\r\n    return (\r\n        <div className=\"message\">\r\n            <Avatar src={user.photo} />\r\n            <div className=\"message__info\">\r\n                <h4>{user.displayName}\r\n                    <span className=\"message__timestamp\">{\r\n                        new Date(timestamp?.toDate()).toUTCString()\r\n                    }</span>\r\n                </h4>\r\n                <h4>\r\n                    <p>{message}</p>\r\n                </h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import {  createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  channelId:null,\r\n  channelName:null\r\n};\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState,\r\n\r\n  reducers: {\r\n    setChannelInfo: (state,action)=>{\r\n      state.channelId=action.payload.channelId;\r\n      state.channelName=action.payload.channelName;\r\n    },\r\n  }\r\n});\r\n\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\n\r\nexport const selectChannelId = (state) => state.app.channelId;\r\nexport const selectUChannelName = (state) => state.app.channelName;\r\n\r\n\r\nexport default appSlice.reducer\r\n","import {  createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  user: null,\r\n};\r\n\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState,\r\n\r\n  reducers: {\r\n    login: (state,action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout:(state)=>{\r\n      state.user=null;\r\n    }\r\n  }\r\n});\r\n\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\n\r\nexport default userSlice.reducer\r\n","import firebase from 'firebase';\r\n// import firebase from '@firebase/app';\r\n// require('firebase/auth');\r\n// import firebase from 'firebase/app';\r\n// import 'firebase/auth';\r\n// import 'firebase/firestore';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBmK1PBU79ulQACyBHXIust2Wk3YuTfL7Y\",\r\n    authDomain: \"discord-clone-9f913.firebaseapp.com\",\r\n    projectId: \"discord-clone-9f913\",\r\n    storageBucket: \"discord-clone-9f913.appspot.com\",\r\n    messagingSenderId: \"189078394785\",\r\n    appId: \"1:189078394785:web:38df5a514df9c604d39de0\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n  const db = firebaseApp.firestore();\r\n  const auth = firebase.auth();\r\n  const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  export { auth,provider};\r\n  export default db;","import React, { useEffect, useState } from \"react\";\r\nimport \"./Chat.css\";\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport CardGiftcardIcon from \"@material-ui/icons/CardGiftcard\";\r\nimport GifIcon from \"@material-ui/icons/Gif\";\r\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\r\nimport Message from \"./Message\";\r\nimport { selectChannelId, selectUChannelName } from \"./features/appSlice\";\r\nimport { selectUser } from \"./features/userSlice\";\r\nimport { useSelector } from \"react-redux\";\r\nimport db from \"./firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nfunction Chat() {\r\n  const user = useSelector(selectUser);\r\n  const channelId = useSelector(selectChannelId);\r\n  const channelName = useSelector(selectUChannelName);\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (channelId) {\r\n      db.collection(\"channels\")\r\n        .doc(channelId)\r\n        .collection(\"messages\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, [channelId]);\r\n\r\n  const sendMessage = (e) => {\r\n    var x = document.forms[\"chatForm\"][\"input\"].value;\r\n    if (x == \"\") {\r\n      alert(\"No message to send!!\");\r\n      return false;\r\n    } else {\r\n      e.preventDefault();\r\n      db.collection(\"channels\").doc(channelId).collection(\"messages\").add({\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n        message: input,\r\n        user: user,\r\n      });\r\n      setInput(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <ChatHeader channelName={channelName} />\r\n      <div className=\"chat__messages\">\r\n        {messages.map((message) => (\r\n          <Message\r\n            timestamp={message.timestamp}\r\n            message={message.message}\r\n            user={message.user}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div className=\"chat__input\">\r\n        <AddCircleIcon fontSize=\"large\" />\r\n        <form name=\"chatForm\">\r\n          <input\r\n            name=\"input\"\r\n            value={input}\r\n            required\r\n            disabled={!channelId}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder={`Message #${channelName}`}\r\n          />\r\n          <button\r\n            className=\"chat__inputButton\"\r\n            type=\"submit\"\r\n            onClick={sendMessage}\r\n          >\r\n            Send Message\r\n          </button>\r\n        </form>\r\n\r\n        <div className=\"chat__inputIcons\">\r\n          <CardGiftcardIcon />\r\n          <GifIcon />\r\n          <EmojiEmotionsIcon />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setChannelInfo } from \"./features/appSlice\"\r\nimport \"./SidebarChannel.css\";\r\n\r\nfunction SidebarChannel({id, channelName}) {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div className=\"sidebarChannel\" \r\n            onClick={()=>\r\n                dispatch(\r\n                    setChannelInfo({\r\n                        channelId: id,\r\n                        channelName: channelName,\r\n                    })\r\n               )\r\n            }\r\n        >\r\n            <h4><span className=\"sidebarChannel__hash\">#</span>{channelName}</h4>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarChannel\r\n","import React, { useEffect, useState } from 'react';\r\nimport '../src/Sidebar.css';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SidebarChannel from './SidebarChannel';\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport {Avatar} from \"@material-ui/core\";\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport HeadsetIcon from '@material-ui/icons/Headset';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { useSelector } from 'react-redux';\r\nimport {  selectUser } from './features/userSlice';\r\nimport db, { auth } from './firebase';\r\n\r\nfunction Sidebar() {\r\n    const fetchUser = useSelector(selectUser);\r\n    const [channels,setChannels] = useState([]);\r\n    useEffect(() => {\r\n        db.collection(\"channels\")\r\n        .onSnapshot(snapshot=> \r\n            (setChannels(snapshot.docs.map(doc=>({\r\n                id: doc.id,\r\n                channel: doc.data(),\r\n            })))))\r\n    }, []);\r\nconst handleAddChannel = () => {\r\n    const channelName = prompt(\"Enter a new chaneel name\");\r\n    if(channelName){\r\n      db.collection(\"channels\").add({\r\n          channelName: channelName,\r\n      })  \r\n    }\r\n}\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__top\">\r\n                <h3>akash's Server</h3>\r\n                <ExpandMoreIcon />\r\n            </div>\r\n            <div className=\"sidebar__channels\">\r\n                <div className=\"sidebar__channelsHeader\">\r\n                    <div className=\"sidebar__header\">\r\n                        <ExpandMoreIcon />\r\n                        <h4>Channel List</h4>\r\n                    </div>\r\n                    <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\" />\r\n                </div>\r\n\r\n                <div className=\"sidebar__channelsList\">\r\n                    {channels.map(({id,channel})=>(\r\n                       <SidebarChannel key={id} id={id} \r\n                       channelName={channel.channelName} />) )}                    \r\n                </div>  \r\n            </div>\r\n            <div className=\"sidebar__voice\">\r\n                <SignalCellularAltIcon \r\n                    className=\"sidebar__voiceIcon\" \r\n                    fontSize=\"large\" \r\n                />\r\n                <div className=\"sidebar__voiceInfo\">\r\n                    <h3>Voice Connected</h3>\r\n                    <p>Stream</p>\r\n                </div>\r\n\r\n                <div className=\"sidebar__voiceIcons\">\r\n                    <InfoIcon />\r\n                    <CallIcon />\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"sidebar__profile\">\r\n                <Avatar onClick={()=>auth.signOut()} src={fetchUser.photo} className=\"avatar\"/>\r\n                <div className=\"sidebar__profileInfo\">\r\n                    <h3>{fetchUser.displayName}</h3>\r\n                    <p>#{fetchUser.uid.substring(0,5)}</p>\r\n                </div>\r\n                <div className=\"sidebar__profileIcons\">\r\n                    <MicIcon />\r\n                    <HeadsetIcon />\r\n                    <SettingsIcon />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import { Button } from '@material-ui/core';\r\nimport {auth,provider} from \"./firebase\";\r\nimport React from 'react';\r\nimport './Login.css';\r\n\r\nfunction Login() {\r\n    const signIn = ()=>{\r\n        auth.signInWithPopup(provider).catch((error)=> alert(error.message));\r\n    };\r\n    \r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"login__logo\">\r\n                <img src=\"/resources/discord-logo-text.png\" alt=\"logo\"/>\r\n            </div>\r\n            <Button onClick={signIn}>Sign In</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './App.css';\r\nimport Chat from './Chat';\r\nimport Sidebar from './Sidebar';\r\nimport {login, logout, selectUser} from \"./features/userSlice\";\r\nimport Login from './Login';\r\nimport { auth } from './firebase';\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser)=>\r\n      {\r\n        if(authUser){\r\n          //the user is logged in\r\n          dispatch(login({\r\n            uid: authUser.uid,\r\n            photo: authUser.photoURL,\r\n            email: authUser.email,\r\n            displayName: authUser.displayName\r\n          }))\r\n        }\r\n        else{\r\n          //the user is logged out\r\n          dispatch(logout());\r\n        }\r\n      }\r\n    )\r\n  }, [dispatch])\r\n  return (\r\n    <div className=\"app\">\r\n      {user ? (\r\n        <>\r\n        <Sidebar />\r\n        <Chat />\r\n        </>\r\n        ):(\r\n          <Login />\r\n        )\r\n      }\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then((registration) => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}